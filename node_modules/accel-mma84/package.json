{
  "name": "accel-mma84",
  "version": "0.2.4",
  "description": "Library to run the MMA8452Q accelerometer.",
  "main": "index.js",
  "scripts": {
    "test": "tinytap -e 'tessel run {} ${ACCEL_PORT}' test/*.js"
  },
  "dependencies": {
    "sync-queue": "0.0.1"
  },
  "hardware": {
    "./examples": false
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/tessel/accel-mma84"
  },
  "author": {
    "name": "Tim Cameron Ryan",
    "email": "tim@timryan.org"
  },
  "license": "MIT",
  "devDependencies": {
    "async": "^0.9.0",
    "tinytap": "^0.2.0"
  },
  "readme": "#Accelerometer\nDriver for the accel-mma84 Tessel accelerometer module. The hardware documentation for this module can be found [here](https://github.com/tessel/hardware/blob/master/modules-overview.md#accelerometer). \n\nIf you run into any issues you can ask for support on the [Accelerometer Module Forums](http://forums.tessel.io/category/accelerometer).\n\n###Installation\n```sh\nnpm install accel-mma84\n```\n\n###Example\n```js\n/*********************************************\nThis basic accelerometer example logs a stream\nof x, y, and z data from the accelerometer\n*********************************************/\n\nvar tessel = require('tessel');\nvar accel = require('../').use(tessel.port['A']); // Replace '../' with 'accel-mma84' in your own code\n\n// Initialize the accelerometer.\naccel.on('ready', function () {\n    // Stream accelerometer data\n  accel.on('data', function (xyz) {\n    console.log('x:', xyz[0].toFixed(2),\n      'y:', xyz[1].toFixed(2),\n      'z:', xyz[2].toFixed(2));\n  });\n\n});\n\naccel.on('error', function(err){\n  console.log('Error:', err);\n});\n```\n\n###Methods\n\n&#x20;<a href=\"#api-accel-availableOutputRates-Logs-the-available-interrupt-rates-in-Hz\" name=\"api-accel-availableOutputRates-Logs-the-available-interrupt-rates-in-Hz\">#</a> accel<b>.availableOutputRates</b>()  \n Logs the available interrupt rates in Hz.  \n\n&#x20;<a href=\"#api-accel-availableScaleRanges-Logs-the-available-accelerometer-ranges-in-units-of-Gs\" name=\"api-accel-availableScaleRanges-Logs-the-available-accelerometer-ranges-in-units-of-Gs\">#</a> accel<b>.availableScaleRanges</b>()  \nLogs the available accelerometer ranges (in units of Gs).  \n\n&#x20;<a href=\"#api-accel-enableDataInterrupts-trueOrFalse-callback-err-Enables-or-disables-data-interrupts-Set-the-first-param-truthy-to-enable-falsy-to-disable\" name=\"api-accel-enableDataInterrupts-trueOrFalse-callback-err-Enables-or-disables-data-interrupts-Set-the-first-param-truthy-to-enable-falsy-to-disable\">#</a> accel<b>.enableDataInterrupts</b>( trueOrFalse, callback(err) )  \n Enables or disables data interrupts, and thus, `data` events. Set the first param truthy to enable, falsy to disable.  \n\n&#x20;<a href=\"#api-accel-getAcceleration-callback-err-xyz-Gets-the-acceleration-from-the-device-outputs-as-array-x-y-z\" name=\"api-accel-getAcceleration-callback-err-xyz-Gets-the-acceleration-from-the-device-outputs-as-array-x-y-z\">#</a> accel<b>.getAcceleration</b>( callback(err, xyz) )  \n Gets the acceleration from the device, outputs as array [x, y, z].  \n\n&#x20;<a href=\"#api-accel-setOutputRate-rateInHz-callback-err-Sets-the-output-rate-of-the-data-1-56-800-Hz\" name=\"api-accel-setOutputRate-rateInHz-callback-err-Sets-the-output-rate-of-the-data-1-56-800-Hz\">#</a> accel<b>.setOutputRate</b>( rateInHz, callback(err) )  \nSets the output rate of the data (1.56-800 Hz).  \n\n&#x20;<a href=\"#api-accel-setScaleRange-scaleRange-callback-err-Sets-the-accelerometer-to-read-up-to-2-4-or-8-Gs-of-acceleration-smaller-range-better-precision\" name=\"api-accel-setScaleRange-scaleRange-callback-err-Sets-the-accelerometer-to-read-up-to-2-4-or-8-Gs-of-acceleration-smaller-range-better-precision\">#</a> accel<b>.setScaleRange</b>( scaleRange, callback(err) )  \nSets the accelerometer to read up to 2, 4, or 8 Gs of acceleration (smaller range = better precision).  \n\n###Events\n&#x20;<a href=\"#api-accel-on-data-callback-xyz-Emitted-when-data-is-available-xyz-is-an-array-in-the-form-of-x-y-z\" name=\"api-accel-on-data-callback-xyz-Emitted-when-data-is-available-xyz-is-an-array-in-the-form-of-x-y-z\">#</a> accel<b>.on</b>( 'data', callback(xyz) )  \n Emitted when data is available. xyz is an array in the form of [x, y, z].  \n\n&#x20;<a href=\"#api-accel-on-error-callback-err-Emitted-upon-error\" name=\"api-accel-on-error-callback-err-Emitted-upon-error\">#</a> accel<b>.on</b>( 'error', callback(err) )  \n Emitted upon error.  \n\n&#x20;<a href=\"#api-accel-on-ready-callback-Emitted-upon-first-successful-communication-between-the-Tessel-and-the-module\" name=\"api-accel-on-ready-callback-Emitted-upon-first-successful-communication-between-the-Tessel-and-the-module\">#</a> accel<b>.on</b>( 'ready', callback() )  \n Emitted upon first successful communication between the Tessel and the module.  \n\n###Further Examples\n* [Change Rates](https://github.com/tessel/accel-mma84/blob/master/examples/change-rates.js). This more advanced accelerometer example logs a stream of x, y, and z data, then stops the stream, changes the polling rate, and resumes streaming from the accelerometer.\n* [Show Axes](https://github.com/tessel/accel-mma84/blob/master/examples/show-axes.js). Demonstrates axes by turning on a different LED per axis (x, y, z) only when that axis has positive acceleration. Also prints +/- per axis to the console.\n\n###Licensing  \nMIT or Apache 2.0, at your option\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/tessel/accel-mma84/issues"
  },
  "homepage": "https://github.com/tessel/accel-mma84",
  "_id": "accel-mma84@0.2.4",
  "dist": {
    "shasum": "28989b030ff07b28b385cddf8db69c5563bd7995"
  },
  "_from": "accel-mma84@",
  "_resolved": "https://registry.npmjs.org/accel-mma84/-/accel-mma84-0.2.4.tgz"
}
